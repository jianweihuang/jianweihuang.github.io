<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用docker-compose部署单机MySQL</title>
    <url>/2021/%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BAMySQL/</url>
    <content><![CDATA[<h3 id="一、拉取MySQL镜像"><a href="#一、拉取MySQL镜像" class="headerlink" title="一、拉取MySQL镜像"></a>一、拉取MySQL镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8</span><br></pre></td></tr></table></figure>

<h3 id="二、创建挂载目录"><a href="#二、创建挂载目录" class="headerlink" title="二、创建挂载目录"></a>二、创建挂载目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /app/docker/mysql8/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /app/docker/mysql8/data</span><br></pre></td></tr></table></figure>

<h3 id="三、编写-docker-compose-yml-文件"><a href="#三、编写-docker-compose-yml-文件" class="headerlink" title="三、编写 docker-compose.yml 文件"></a>三、编写 docker-compose.yml 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/docker/mysql8</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span> <span class="comment"># 设置容器时区</span></span><br><span class="line">      <span class="attr">MYSQL_TCP_PORT:</span> <span class="number">3306</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span> <span class="comment"># root用户密码</span></span><br><span class="line">      <span class="comment">#MYSQL_ROOT_HOST: &#x27;localhost&#x27; # 是否开启root账号的远程登录,默认是开启的,启用:填&#x27;%&#x27;或者注释掉这行,禁用:填&#x27;localhost&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/var/lib/mysql&quot;</span> <span class="comment"># 映射数据目录</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./log:/var/log/mysql&quot;</span> <span class="comment"># 映射日志目录</span></span><br></pre></td></tr></table></figure>

<h3 id="四、启动容器"><a href="#四、启动容器" class="headerlink" title="四、启动容器"></a>四、启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="五、运行后查看启动容器的情况"><a href="#五、运行后查看启动容器的情况" class="headerlink" title="五、运行后查看启动容器的情况"></a>五、运行后查看启动容器的情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h3 id="六、连接测试"><a href="#六、连接测试" class="headerlink" title="六、连接测试"></a>六、连接测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器ID /bin/bash</span><br><span class="line">mysql -h127.0.0.1 -uroot -p</span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure>

<p>如果远程连接不上可以看看防火墙是否已经开放3306端口,例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br><span class="line">sudo ufw status numbered</span><br><span class="line">sudo ufw allow 3306</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker-compose部署单机Redis</title>
    <url>/2021/%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BARedis/</url>
    <content><![CDATA[<h3 id="一、创建挂载目录"><a href="#一、创建挂载目录" class="headerlink" title="一、创建挂载目录"></a>一、创建挂载目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /app/docker/redis/conf</span><br><span class="line"><span class="built_in">mkdir</span> -p /app/docker/redis/data</span><br></pre></td></tr></table></figure>

<h3 id="二、编写docker-compose-yml文件和redis-conf配置文件"><a href="#二、编写docker-compose-yml文件和redis-conf配置文件" class="headerlink" title="二、编写docker-compose.yml文件和redis.conf配置文件"></a>二、编写docker-compose.yml文件和redis.conf配置文件</h3><p>docker-compose.yml文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/docker/redis</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf:/etc/redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure>

<p>配置文件 redis.conf</p>
<p>详细redis.conf可参考官方文档:<br><a href="https://redis.io/docs/latest/operate/oss_and_stack/management/config/">https://redis.io/docs/latest/operate/oss_and_stack&#x2F;management&#x2F;config&#x2F;</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/docker/redis/conf</span><br><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Redis 服务器的端口号（默认：6379）</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"># 绑定的 IP 地址，如果设置为 127.0.0.1，则只能本地访问；若设置为 0.0.0.0，则监听所有接口（默认：127.0.0.1）</span><br><span class="line">bind 0.0.0.0</span><br><span class="line"></span><br><span class="line"># 设置密码，客户端连接时需要提供密码才能进行操作，如果不设置密码，可以注释掉此行（默认：无）</span><br><span class="line"># requirepass foobared</span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line"># 设置在客户端闲置一段时间后关闭连接，单位为秒（默认：0，表示禁用）</span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"># 是否以守护进程（daemon）模式运行，默认为 &quot;no&quot;，设置为 &quot;yes&quot; 后 Redis 会在后台运行</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># 设置日志级别（默认：notice）。可以是 debug、verbose、notice、warning</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"># 设置日志文件的路径（默认：空字符串），如果不设置，日志会输出到标准输出</span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"># 设置数据库数量（默认：16），Redis 使用数据库索引从 0 到 15</span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"># 是否启用 AOF 持久化，默认为 &quot;no&quot;。如果设置为 &quot;yes&quot;，将在每个写操作执行时将其追加到文件中</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># 设置 AOF 持久化的文件路径（默认：appendonly.aof）</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># AOF 持久化模式，默认为 &quot;always&quot;。可以是 always、everysec 或 no</span><br><span class="line"># always：每个写操作都立即同步到磁盘</span><br><span class="line"># everysec：每秒钟同步一次到磁盘</span><br><span class="line"># no：完全依赖操作系统的行为，可能会丢失数据，但性能最高</span><br><span class="line"># appendfsync always</span><br><span class="line"></span><br><span class="line">save 3600 1</span><br><span class="line">save 300 100</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"># 设置 RDB 持久化文件的名称（默认：dump.rdb）</span><br><span class="line"># dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># 设置是否开启慢查询日志，默认为 &quot;no&quot;</span><br><span class="line"># slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"># 设置慢查询日志的最大长度，默认为 128</span><br><span class="line"># slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"># 设置每秒最大处理的写入命令数量，用于保护 Redis 服务器不被超负荷写入（默认：0，表示不限制）</span><br><span class="line"># maxclients 10000</span><br><span class="line"></span><br><span class="line"># 设置最大连接客户端数量（默认：10000，0 表示不限制）</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># 设置最大使用内存的策略（默认：noeviction）。可以是 volatile-lru、allkeys-lru、volatile-random、allkeys-random、volatile-ttl 或 noeviction</span><br><span class="line"># maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line"># 设置允许最大使用内存的比例（默认：0），设置为 0 表示禁用</span><br><span class="line"># maxmemory-samples 5</span><br><span class="line"></span><br><span class="line"># 设置 RDB 持久化文件的保存路径，默认保存在当前目录</span><br><span class="line"># dir ./</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="三、启动容器"><a href="#三、启动容器" class="headerlink" title="三、启动容器"></a>三、启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="二、-四、运行后查看启动容器的情况"><a href="#二、-四、运行后查看启动容器的情况" class="headerlink" title="二、 四、运行后查看启动容器的情况"></a>二、 四、运行后查看启动容器的情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h3 id="五、连接测试"><a href="#五、连接测试" class="headerlink" title="五、连接测试"></a>五、连接测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis bash</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">auth 123456</span><br><span class="line">ping</span><br></pre></td></tr></table></figure>

<p>如果一切正常，你会看到Redis响应 “PONG” ，表示连接成功。</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker-compose部署单机MongoDB</title>
    <url>/2021/%E4%BD%BF%E7%94%A8docker-compose%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BAMongoDB/</url>
    <content><![CDATA[<h3 id="一、创建挂载目录"><a href="#一、创建挂载目录" class="headerlink" title="一、创建挂载目录"></a>一、创建挂载目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /app/docker/mongo/data/db</span><br></pre></td></tr></table></figure>

<h3 id="二、编写-docker-compose-yml-文件"><a href="#二、编写-docker-compose-yml-文件" class="headerlink" title="二、编写 docker-compose.yml 文件"></a>二、编写 docker-compose.yml 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /app/docker/mongo</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">root</span>  <span class="comment"># 配置了这两个参数后,就会以mongo --auth开启认证模式启动,并且creating a simple user with the role root in the admin authentication database</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data/db:/data/db&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="三、启动容器"><a href="#三、启动容器" class="headerlink" title="三、启动容器"></a>三、启动容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="四、运行后查看启动容器的情况"><a href="#四、运行后查看启动容器的情况" class="headerlink" title="四、运行后查看启动容器的情况"></a>四、运行后查看启动容器的情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<h3 id="五、连接测试"><a href="#五、连接测试" class="headerlink" title="五、连接测试"></a>五、连接测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#mongo cli 连接测试</span></span><br><span class="line">docker run -it --network mongo_default --<span class="built_in">rm</span> mongo:5 mongosh --host mongo -u root -p 123456 --authenticationDatabase admin <span class="built_in">test</span></span><br><span class="line">db.getName();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mongo</tag>
      </tags>
  </entry>
</search>
